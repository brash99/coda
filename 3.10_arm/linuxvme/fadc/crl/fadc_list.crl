#  Source for generic VME readout using a
#  TJNAF trigger supervisor interface register (TIR)
#  as a source for external interrupts
#
#    David Abbott, TJNAF 1996

readout list VME1
maximum 16384,400
vme readout
#polling
#ts control


const TIR_ADDR = 0x0ed0

const NFADC = 3
const FADC_ADDR = 0xed0000
const FADC_INCR = 0x080000

const FADC_WINDOW_LAT = 375
const FADC_WINDOW_WIDTH = 24
const FADC_MODE = 10
const MAXFADCWORDS = 0


%%
unsigned int blockLevel = 1;
unsigned int BUFFERLEVEL = 1;
extern int bigendian_out;
extern int fadcA32Base, nfadc;
%%


begin download
%%
{
  unsigned short iflag;
  int ifa, stat, res;

 /* If the ROC is sending data to Little-Endian EB */
 /* e.g. a x86 Linux CPU then bigendian_out = 0. */
 /* Unless the ROC is also running on a Little-Endian */
 /* machine. Then set bigendian_out=1. */
  bigendian_out = 0;


  /* Setup TIR */
  tirInit(TIR_ADDR);

  /* Program/Init FADC Modules Here */
  iflag = 0xea00; /* SDC Board address */
  iflag |= FA_INIT_EXT_SYNCRESET;  /* Front panel sync-reset */
  iflag |= FA_INIT_FP_TRIG;  /* Front Panel Input trigger source */
  iflag |= FA_INIT_FP_CLKSRC;  /* Internal 250MHz Clock source */

  fadcA32Base = 0x09000000;

  vmeSetQuietFlag(1);
  faInit(FADC_ADDR, FADC_INCR, NFADC, iflag);
  vmeSetQuietFlag(0);

  for(ifa = 0; ifa < nfadc; ifa++)
    {
      faEnableBusError(faSlot(ifa));

      /* Set input DAC level */
      faSetDAC(faSlot(ifa), 3250, 0);

      /*  Set All channel thresholds to 150 */
      faSetThreshold(faSlot(ifa), 150, 0xffff);
  
      /*********************************************************************************
       * faSetProcMode(int id, int pmode, unsigned int PL, unsigned int PTW, 
       *    int NSB, unsigned int NSA, unsigned int NP, 
       *    unsigned int NPED, unsigned int MAXPED, unsigned int NSAT);
       *
       *  id    : fADC250 Slot number
       *  pmode : Processing Mode
       *          9 - Pulse Parameter (ped, sum, time)
       *         10 - Debug Mode (9 + Raw Samples)
       *    PL : Window Latency
       *   PTW : Window Width
       *   NSB : Number of samples before pulse over threshold
       *   NSA : Number of samples after pulse over threshold
       *    NP : Number of pulses processed per window
       *  NPED : Number of samples to sum for pedestal
       *MAXPED : Maximum value of sample to be included in pedestal sum
       *  NSAT : Number of consecutive samples over threshold for valid pulse
       */
      faSetProcMode(faSlot(ifa),
		    FADC_MODE,   /* Processing Mode */
		    FADC_WINDOW_LAT, /* PL */
		    FADC_WINDOW_WIDTH,  /* PTW */
		    3,   /* NSB */
		    6,   /* NSA */
		    1,   /* NP */
		    4,   /* NPED */
		    250, /* MAXPED */
		    2);  /* NSAT */
      
    }

  faSDC_Status(0);
  faGStatus(0);

}
%%
  log inform "User Download Executed"

end download
    
begin prestart

  log inform "Entering User Prestart"
%%
{
  int ifa;
  for(ifa=0; ifa < nfadc; ifa++) 
    {
      faSoftReset(faSlot(ifa),0);
      faResetTriggerCount(faSlot(ifa));
    }

  tiStatus(0);
  faGStatus(0);
}
%%

  init trig source VME
  link async trig source VME 1 to usrtrig and usrtrig_done
  event type 1 then read VME 1

  log inform "User Prestart Executed"

end prestart

begin end

  CDODISABLE(VME,1,0);
%%
{
  /* FADC Disable */
  faGDisable(0);

  /* FADC Event status - Is all data read out */
  faGStatus(0);

  tiStatus(0);

  faGReset(0);

}
%%

  log inform "User End Executed"

end end

begin pause

  CDODISABLE(VME,1,0);

  log inform "User Pause Executed"

end pause

begin go

  variable outval
  
  log inform "Entering User Go"

%%
{
  if(FADC_MODE == 9)
    MAXFADCWORDS = 2 + 4 + blockLevel * 8;
  else /* FADC_MODE == 10 */
    MAXFADCWORDS = 2 + 4 + blockLevel * (8 + FADC_WINDOW_WIDTH/2);
  
  /*  Enable FADC */
  faGEnable(0, 0);

  taskDelay(1);
  faSDC_Sync();
  taskDelay(1);
}
%%

  CDOENABLE(VME,1,0);

end go

begin trigger usrtrig

 variable ii, stat, csr

 rol->dabufp = (long *) 0;
 open event type EVTYPE of BT_UI4

%%
{
  int ifa, stat, nwords;
  unsigned int datascan, scanmask;
  int roCount = 0, blockError = 0;
  
  /* Mask of initialized modules */
  scanmask = faScanMask();
  /* Check scanmask for block ready up to 100 times */
  datascan = faGBlockReady(scanmask, 100); 
  stat = (datascan == scanmask);

  if(stat) 
    {
      for(ifa = 0; ifa < nfadc; ifa++)
	{
	  nwords = faReadBlock(faSlot(ifa), rol->dabufp, MAXFADCWORDS, 1);
	  
	  /* Check for ERROR in block read */
	  blockError = faGetBlockError(1);
	  
	  if(blockError) 
	    {
	      logMsg("ERROR: Slot %d: in transfer (event = %d), nwords = 0x%x\n",
		     faSlot(ifa), roCount, nwords, 4, 5, 6);

	      if(nwords > 0)
		rol->dabufp += nwords;
	    } 
	  else 
	    {
	      rol->dabufp += nwords;
	    }
	}
    }
  else 
    {
      logMsg("ERROR: Event %d: Datascan != Scanmask  (0x%08x != 0x%08x)\n",
	     roCount, datascan, scanmask, 4, 5, 6);
    }


  /* Check if a Block of data is available */
  /* Check that there is no data left */
  for(ifa = 0; ifa < nfadc; ifa++)
    {
      stat = faDready(faSlot(ifa));
      if(stat > 0)
	{
	  csr = faReadCSR(faSlot(ifa));
	  logMsg("ERROR: Data still in FADC slot %d (event %d, scan 0x%x csr 0x%x ) - clearing\n",
		 faSlot(ifa), *(rol->nevents), stat, csr,0,0);
	  faClear(faSlot(ifa));
	}
    }
}

%%

 close event

end trigger

begin done usrtrig


end done


begin done

# Acknowledge tir register
  CDOACK(VME,1,0);

end done

begin status

end status


