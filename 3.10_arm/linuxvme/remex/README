###############################################################################
#  Copyright (c) 2013        Southeastern Universities Research Association,
#                            Thomas Jefferson National Accelerator Facility 
#                                                                           
#    This software was developed under a United States Government license   
#    described in the NOTICE file included as part of this distribution.    
#                                                                           
#    Author:  Bryan Moffit                                                  
#             moffit@jlab.org                   Jefferson Lab, MS-12B3      
#             Phone: (757) 269-5660             12000 Jefferson Ave.        
#             Fax:   (757) 269-5800             Newport News, VA 23606      
#                                                                           
###############################################################################
#
# Description:
#    README for remex Library and Stand-alone Client
#
###############################################################################

Host Configuration
-------------------
  1. Adding hostnames

Host will respond to up to 5 provided names.  It may also be
initialized to respond to it's hostname (provided by
gethostname(3)... see section 3.).  
To add up to 4 more names:

   remexAddName(char *name);

e.g.

   remexAddName("robot");
   remexAddName("ROC42");
   remexAddName("dafarm42.jlab.org");

  2. Setting the cMsg server hostname

By default, the remex Host will use multicast to attempt to communicate with 
the cMsg server.  This doesn't always work as intended (e.g. if there are
more than one cMsg server in the subnet).  To set the cMsg server hostname:

   remexSetCmsgServer(char *hostname);

e.g.

   remexSetCmsgServer("dafarm28");

  3. Initialization

Before any commands can be executed or variables can be obtained, initialize the
remex Host with:
   
   remexInit(char *name,int useHostName);

     'name'         - remex hostname to respond to.
     'useHostName'  - attempt to use hostname (from gethostname(3)) 
                      as a remex hostname

  4. Close

When done being a remex host, make a call to:

   remexClose();

before exiting the process.

  5. Useful host debugging utilities:

   remexPrintNames()
      - Print the names (to stdout) that the remex Host will respond to.

   remexPrintCmsgUDL()
      - Print the cMsg UDL (to stdout)

  6. Redirection of standard output

Standard output that is generated by an function when it is executed can 
be redirected (at any time) to the client by calling:

  remexSetRedirect(1);

This feature can be disabled with:

  remexSetRedirect(0);


Client Configuration
--------------------
  1. Initialization

   remexClientInit(char *clientName, char *cMsgServer)

     'clientName'    - Specified name of the client.  If NULL, will default
                        to hostname_pid (provided by gethostname (3)
                        and getpid (3))
     'cMsgServer'    - Specified hostname of cMsg Server.  If NULL, will
	                default to multicast.

  2. Lock VME Bus / VTP shared mutex

To Lock and Unlock the VME Bus or VTP shared mutex during an Execute Function
or Get Variable command:

   remexClientUseMutexLock(1);

before any Function or Variable routine call.  To ignore the shared
mutex (default):

   remexClientUseMutexLock(0);

  3. Function Calls:

   int  remexClientExecFunction(char *remexHost, char *command);
   int  remexClientGetFloatFunction(char *remexHost, char *command, float *value);
   int  remexClientGetDoubleFunction(char *remexHost, char *command, double *value);
   int  remexClientGetInt32Function(char *remexHost, char *command, int *value);
   int  remexClientGetInt16Function(char *remexHost, char *command, short *value);
   int  remexClientGetUint32Function(char *remexHost, char *command, unsigned int *value);
   int  remexClientGetUint16Function(char *remexHost, char *command, unsigned short *value);

All of these routines return 0, if successful.  Otherwise, -1.

     'remexHost'   - Specified remex Host name (i.e. the name the host will respond to..)
     'command'     - The Function call to execute.
                      e.g. "sqrtf(2.2)"
     'value'       - Returned value from function execution.

  4. Variables

int  remexClientGetFloat(char *remexHost, char *variable, float *value);
int  remexClientGetDouble(char *remexHost, char *variable, double *value);
int  remexClientGetInt32(char *remexHost, char *variable, int *value);
int  remexClientGetInt16(char *remexHost, char *variable, short *value);
int  remexClientGetUint32(char *remexHost, char *variable, unsigned int *value);
int  remexClientGetUint16(char *remexHost, char *variable, unsigned short *value);

All of these routines return 0, if successful.  Otherwise, -1.

     'remexHost'   - Specified remex Host name (i.e. the name the host will respond to..)
     'variable'    - The global variable to obtain
     'value'       - Returned value of the global variable.

  5. Close
     
When done being a remex client, make a call to:

   remexClientDisconnect();

before exiting the process.


Commandline Client
--------------------

  1. Usage:

Usage: remex <options> <remexHost> <command>

Execute a function, or retreive a global variable from a remex Host.
 If <remexHost> is omitted, the current hostname will be used.
 If <options> is omitted, the Execute Function will be used.

<options>:
  -v, --var                      Specified <command> is a global variable.

  -l, --lock                     Lock and Unlock the shared VME Bus Mutex during
                                  the operation.

  -c, --cmsghost <cmsgHostName>  Specify <cmsgHostName> as the cMsg server.
                                  If not specified, localhost will be used,
				  or whatever is specified in the 
				  REMEX_CMSG_HOST environment variable.

 Return Values (int32 by default):
  --void                         Do not attempt to return any value from the
                                   function execution.
                                   Ignored for global variables.

  --float
  --double
  --int32                        
  --int16
  --uint32
  --uint16

Known bugs and/or limitations
------------------------------

  1. double types in function arguments

If a function has a 'double' as its argument, it will always be read
in as 0.0

This has to do with out the function arguments are parsed and provided
to the function pointer on execution.  A fix may/may not be in the
works.

  2. Executed function was actually a global variable

If a global variable is specified as the 'command' in a
remexClient*Function(..) call, the host will end in 'Segmentation
Fault'.

This has to do with how the symbols are stored and retrieved with
dlopen(..) and dlsym(..).  AFAIK, there is no way to distinguish
between a function pointer and a data object pointer with the current
implementation of dlsym(..).  A fix is not in the works.
