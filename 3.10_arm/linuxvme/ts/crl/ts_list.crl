# 
#  User readout list using a TS (pipeline) as a trigger source
#
#    Bryan Moffit, TJNAF 2012
#

readout list GEN_USER
maximum 1024,512
general readout

# A24 Address for TS Module 
const TRIG_ADDR=0xA80000
# TRIG_MODE=0 for interrupt mode
const TRIG_MODE=0

const usePulser=1

extern int bigendian_out;
extern unsigned tsIntCount;

############################################################
# DOWNLOAD
############################################################
begin download

# When sending to a Linux Host set bigendian_out = 0
bigendian_out = 0;

%%
{
  /* TS Setup */
  tsInit(TRIG_ADDR,TRIG_MODE,0);

  /* 
   * Set the trigger source:
   *  2: Front Panel TRG
   *  3: Front Panel TS Inputs
   *  5: Internal Pulser
   */
  if(usePulser)
    tsSetTriggerSource(5);
  else
    tsSetTriggerSource(3);

  /* Enable/Disable specific inputs */
  tsSetFPInput(0x0);
  tsSetGenInput(0xffff);
  tsSetGTPInput(0x0);
  

  /* Set number of events per block */
  tsSetBlockLevel(1);

  /* Load the default trigger table */
  tsLoadTriggerTable();
  

  /* 
   * Load the trigger table that associates 
   *  TS#1 | TS#2 | TS#3 : trigger1
   *  TS#4 | TS#5 | TS#6 : trigger2 (playback trigger)
   */
  tsLoadTriggerTable();

  /* 
   * Trigger Holdoff rule "1":
   *  - No more than "1" trigger within "5"*16ns 
   *  Trigger Holdoff rule 2
   *  - No more than "2" triggers within "10"*16ns 
   */
  tsSetTriggerHoldoff(1,5,0);
  tsSetTriggerHoldoff(2,10,0);

  /* 
   * Set the Block Buffer Level
   *  0:  Pipeline mode
   *  1:  One Block per readout - "ROC LOCK" mode
   *  2-255:  "Buffered" mode.
   */
  tsSetBlockBufferLevel(1);

  /* Override the busy source set in tsInit */
  tsSetBusySource(TS_BUSY_LOOPBACK,1);

  /* Front panel trigger prescale: 2^<arg> */
/*   tsSetPrescale(0); */

}
%%

  log inform "User Download Executed"

end download
    
############################################################
# PRESTART
############################################################
begin prestart

  variable jj, adc_id

  log inform "Entering User Prestart"
%%
  /* Reset the TS Clock and Trigger Links at the START of Prestart */
  tsClockReset();
  taskDelay(2);
  tsSyncReset();
  taskDelay(2);
  tsTrigLinkReset();
%%

  init trig source GEN
  link async trig source GEN 1 to tstrig and tstrig_done
  event type 1 then read GEN 1

%%
  /* Enable FADCs here */

  /* Send a SYNC at the END of Prestart */
  tsSyncReset();
  taskDelay(2);

%%

  log inform "User Prestart Executed"

end prestart

############################################################
# END
############################################################
begin end

%%
{
  CDODISABLE(GEN,1,0);

  if(usePulser)
    tsDisableRandomTrigger();

  tsStatus();
  printf("Interrupt Count: %8d \n",tsIntCount);
}
%%

  log inform "User End Executed"

end end

############################################################
# PAUSE
############################################################
begin pause

  CDODISABLE(GEN,1,0);

  log inform "User Pause Executed"

end pause

############################################################
# GO
############################################################
begin go
  
  log inform "Entering User Go"
  
%%
{
  CDOENABLE(GEN,1,0);

  tsStatus();
  
  if(usePulser)
    tsSetRandomTrigger(1,0x7);
}
%%

  log inform "User Go Executed"

end go

############################################################
# TRIGGER
############################################################
begin trigger tstrig
  variable dCnt,ii,tsbready,timeout

  rol->dabufp = (long *) 0;
  open event type EVTYPE of BT_UI4

%%
  if(__the_event__ == (DANODE*)0)
    {
      logMsg("primary rol: error here\n");
    }

  if(rol->dabufp != NULL)
    {

      tsbready = tsBReady();

      timeout=0;

      while((tsbready==0) && (timeout<100))
	{
	  tsbready=tsBReady();
	  timeout++;
	}

      if(timeout>=100)
	{
	  logMsg("tsBReady TIMEOUT\n",1,2,3,4,5,6);
	}
      else
	{
	  dCnt = tsReadBlock(rol->dabufp,900>>2,1);
	  if(dCnt<=0)
	    {
	      logMsg("No data or error.  dCnt = %d\n",dCnt);
	    }
	  else
	    {
	      rol->dabufp += dCnt;
	    }
	}
    }
  else
    {
      logMsg("ts_list: ERROR: rol->dabufp is NULL\n");
    }

%%

 close event

end trigger

begin done tstrig

end done

############################################################
# DONE (TRIGGER ACKNOWLEDGE)
############################################################
begin done
  CDOACK(GEN,1,0);
end done

begin status

end status


